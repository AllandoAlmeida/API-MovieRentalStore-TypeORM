Iniciando o projeto: (não utilizado nesse projeto)
npm init -y;

Instalando dependências:
npm i -S typeorm reflect-metadata dotenv pg;

Instalando dependências de desenvolvimento:
npm i -D typescript @types/node;

Configurando o TypeScript:
npx tsc --init;

Instalando express:
npm install express
npm install @types/express
npm i -S express-async-errors


Instalando o dotenv:

npm install dotenv @types/dotenv

Instalar o zod:

npm i -S zod

npm run typeorm migration:generate src/migrations/inicialmigrations -- -d src/data-source
npm run typeorm migration:run -- -d src/data-source



POST /movies Cadastra um novo filme (zod)


PATCH /movies/:id Atualiza o filme passado por id (zod) id nao atualizada, deve ser ignorada caso seja enviado no body

DELETE /movies/:id Deleta o filme passado por id


GET /movies Lista todos os filmes cadastrados

import express from 'express';
import { createConnection } from 'typeorm'; // Importando a função correta para criar uma conexão
import { Movie } from './entities/Movie'; // Importe sua entidade Movie aqui

const app = express();

// Configuração do TypeORM e conexão com o banco de dados
createConnection()
    .then(async connection => {
        console.log('Connected to the database');

        app.get('/movies', async (req, res) => {
            const movieRepository = connection.getRepository(Movie);

            // Parse dos query parameters
            const page = Math.max(parseInt(req.query.page) || 1, 1); // Garante que a página seja pelo menos 1
            const perPage = Math.min(Math.max(parseInt(req.query.perPage) || 5, 1), 5); // Limita o perPage entre 1 e 5
            const order = req.query.order === 'desc' ? 'DESC' : 'ASC';
            const sort = req.query.sort === 'price' || req.query.sort === 'duration' ? req.query.sort : 'id';

            // Calcula o offset baseado na paginação
            const offset = (page - 1) * perPage;

            // Encontra os filmes baseados na paginação e ordenação
            const [movies, totalCount] = await movieRepository.findAndCount({
                order: {
                    [sort]: order,
                },
                skip: offset,
                take: perPage,
            });

            // Calcula os valores da página anterior e próxima
            const prevPage = page > 1 ? page - 1 : null;
            const nextPage = offset + perPage < totalCount ? page + 1 : null;

            // Cria o objeto de paginação
            const pagination = {
                prevPage: prevPage ? `/movies?page=${prevPage}&perPage=${perPage}&sort=${sort}&order=${order}` : null,
                nextPage: nextPage ? `/movies?page=${nextPage}&perPage=${perPage}&sort=${sort}&order=${order}` : null,
                count: totalCount,
                data: movies,
            };

            // Envie o objeto de paginação como resposta
            res.json(pagination);
        });

        // Inicia o servidor Express
        app.listen(3000, () => {
            console.log('Server is running on port 3000');
        });
    })
    .catch(error => {
        console.error('Error connecting to the database:', error);
    });
